import openai
import streamlit as st
import os

# Set up OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

# Function to get average water usage data using ChatGPT
def get_average_water_usage(city):
    prompt = (
        f"You are an expert in water conservation. Please provide the average monthly household water usage in gallons specifically for the city of {city}. If city-specific data is not available, provide an estimate based on the county-level data. If county-level data is also unavailable, provide an estimate for the state of California, ensuring the response is as localized as possible."
    )
    try:
        # Use OpenAI API to get average water usage data
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0]['message']['content'].strip()
    except Exception as e:
        return f"An error occurred: {e}"

# Function to generate water usage insights and conservation guidance
def generate_water_usage_insights(user_usage, avg_usage, city, garden_size, plant_types):
    avg_usage_str = avg_usage if isinstance(avg_usage, str) else f"{avg_usage} gallons per month"
    
    prompt = (
        f"You are a water conservation expert. Based on the following information, provide personalized water usage insights and recommendations: \n"
        f"User Monthly Water Usage: {user_usage} gallons\n"
        f"Average Monthly Water Usage for {city}: {avg_usage_str}\n"
        f"Garden Size: {garden_size} square feet\n"
        f"Plant Types: {plant_types}\n"
        f"Please provide a comparison of the user's monthly water usage to the average monthly usage, and suggest ways to reduce usage if it is above average. Ensure that the comparison is based on equivalent units (monthly household usage)."
    )
    try:
        # Use OpenAI API to generate insights
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful water conservation expert."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0]['message']['content'].strip() + (f"\n\n(Source for average water usage: Generated by ChatGPT based on available data for {city} or the regional area)")
    except Exception as e:
        return f"An error occurred: {e}"

# Streamlit UI setup
st.title("Personalized Water Usage Insights & Conservation Guidance")

# User inputs for water usage insights
city = st.text_input("Enter your city:")
user_usage = st.number_input("Enter your household water usage for the month (in gallons):", min_value=0)
garden_size = st.number_input("Enter the size of your garden (in square feet):", min_value=1)
plant_types = st.text_area("Enter the types of plants in your garden:")

if st.button("Get Water Usage Insights & Recommendations"):
    if city:
        # Get average water usage data
        avg_usage = get_average_water_usage(city)

        # Generate water usage insights and recommendations
        insights = generate_water_usage_insights(user_usage, avg_usage, city, garden_size, plant_types)
        st.write("### Water Usage Insights & Recommendations:")
        st.write(insights)
    else:
        st.warning("Please enter a valid city name.")

def show():
    st.title("Personalized Water Usage Insights & Conservation Guidance")

    # User inputs for water usage insights
    city = st.text_input("Enter your city:")
    user_usage = st.number_input("Enter your household water usage for the month (in gallons):", min_value=0)
    garden_size = st.number_input("Enter the size of your garden (in square feet):", min_value=1)
    plant_types = st.text_area("Enter the types of plants in your garden:")

    if st.button("Get Water Usage Insights & Recommendations"):
        if city:
            avg_usage = get_average_water_usage(city)
            generate_water_usage_insights(user_usage, avg_usage, city, garden_size, plant_types)
        else:
            st.warning("Please enter a valid city name.")

# Call the show function to display the UI
show()
